docker compose up

docker compose down -v





# go to the downstream node and add the upstream federation and policy




# Adds a federation upstream named "myfed"

rabbitmqctl set_parameter federation-upstream myfed '{"uri":"amqp://admin:password@rabbitmq1:5672/%2f"}'



# Adds a policy named "mypolicy"

rabbitmqctl set_policy mypolicy  "^test" '{"federation-upstream-set":"all"}' --apply-to exchanges

or 

rabbitmqctl set_policy mypolicy  "^test" '{"federation-upstream":"myfed"}' --apply-to exchanges





# To deactivate federation for the matching exchanges, delete the policy using its name:

rabbitmqctl clear_policy mypolicy






create an exchange 'test1' in the down stream, this exchange will be synced automatically to up stream

create the queue on both up and down respectively and bind to the test1 exchange,  the queue name can be different.

up:
qq1 -> test1

down:
qq2 -> test1

send the message to the 'test1' exchange(not the queue) in the up stream

the message will be copied to the down stream









rabbitmqctl federation_status


# rabbitmqctl federation_status
Listing federation links on node rabbit@rabbitmq2...
[#{error => <<>>,id => <<"2ea459e2">>,status => running,type => exchange,
   exchange => <<"test1">>,queue => <<>>,
   uri => <<"amqp://rabbitmq1:5672/%2f">>,vhost => <<"/">>,
   last_changed => <<"2025-09-17 03:49:26">>,
   local_connection => <<"<rabbit@rabbitmq2.1758080692.1378.0>">>,
   upstream_exchange => <<"test1">>,upstream_queue => <<>>,
   upstream => <<"myfed">>}]
root@rabbitmq2:/#







# ssh into the downstream node

amqp://admin:password@rabbitmq-up:5672/%2f




# publish the message from the exchange level not the queue level
