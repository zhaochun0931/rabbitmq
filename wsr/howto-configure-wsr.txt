# pod/perf-test created

username="$(kubectl get secret rabbitmq1-default-user -o jsonpath='{.data.username}' | base64 --decode)"
password="$(kubectl get secret rabbitmq1-default-user -o jsonpath='{.data.password}' | base64 --decode)"
service="$(kubectl get service rabbitmq1 -o jsonpath='{.spec.clusterIP}')"
kubectl run perf-test --image=pivotalrabbitmq/perf-test -- -x 5 -y 0 --quorum-queue --queue qq2 --uri amqp://$username:$password@$service/test



kubectl port-forward "service/rabbitmq1" 15672 5672 5552
kubectl port-forward "service/rabbitmq2" 15672 5672 5552


nohup kubectl port-forward service/rabbitmq1 --address 0.0.0.0 15672 5672 5552 &
nohup kubectl port-forward service/rabbitmq2 --address 0.0.0.0 15672 5672 5552 &






rabbitmqctl schema_replication_status

$ rabbitmqctl schema_replication_status

Schema replication status on node rabbit@rabbitmq2-server-0.rabbitmq2-nodes.default
Operating mode: downstream
State: syncing
Upstream endpoint(s): 10.1.0.4:5672
Upstream username: test-user
Last connection completion timestamp: 1742972850
Last synchronisation request timestamp: 1742973720

rabbitmq [ ~ ]$



rabbitmqctl standby_replication_status


$ rabbitmqctl standby_replication_status

Standby replication status on node rabbit@rabbitmq2-server-0.rabbitmq2-nodes.default
state	operating_mode	upstream_endpoints	upstream_username	virtual_host
connected	downstream	[10.1.0.4:5552]	test-user	test
rabbitmq [ ~ ]$





rabbitmqctl list_vhosts_available_for_standby_replication_recovery

$ rabbitmqctl list_vhosts_available_for_standby_replication_recovery
Listing virtual hosts available for multi-DC replication recovery on node rabbit@rabbitmq2-server-0.rabbitmq2-nodes.default
test
rabbitmq [ ~ ]$





rabbitmq-diagnostics inspect_local_data_available_for_standby_replication_recovery



$ rabbitmq-diagnostics inspect_local_data_available_for_standby_replication_recovery
Inspecting local data replicated for multi-DC recovery
messages	exchange	vhost	routing_key
729124	direct	test	3e05c587-1743-477e-bb9d-40965a8e17f2
rabbitmq [ ~ ]$







rabbitmqctl promote_standby_replication_downstream_cluster


