rabbitmqctl eval "rabbit_misc:version()."

rabbitmqctl eval "rabbit_misc:otp_release()."

rabbitmqctl eval "node()."

rabbitmqctl eval "nodes()."

rabbitmqctl eval "rabbit_nodes:list_running()."
rabbitmqctl eval 'rabbit_mgmt_metrics_collector:reset_all().'
rabbitmqctl eval 'rabbit_vhost:msg_store_dir_path(<<"/">>).'






rabbitmqctl eval 'application:get_all_env(rabbit).'

rabbitmqctl eval 'rabbit_shovel_status:status().'

rabbitmqctl eval "rabbit_misc:version()."

rabbitmqctl eval "rabbit_misc:otp_release()."


rabbitmqctl eval 'application:get_all_env(rabbit).'

rabbitmqctl eval 'application:get_env(rabbit, log).'

rabbitmqctl eval 'application:get_env(rabbit, loopback_users).'

rabbitmqctl eval 'node(), nodes().'

rabbitmqctl eval 'rabbit_log:critical("Severity = critical").'

rabbitmqctl eval 'rabbit_log:error("Severity = error").'

rabbitmqctl eval 'rabbit_log:warning("Severity = warning").'

rabbitmqctl eval "net_adm:ping('rabbit@NODE-NAME')."

rabbitmqctl eval 'rabbit_diagnostics:maybe_stuck().'

rabbitmqctl eval 'erlang:system_info(process_limit).'

rabbitmqctl eval 'inet:i().'

rabbitmqctl eval 'rabbit_amqqueue:internal_delete({resource,<<"prod">>,queue,<<"x1">>}).'


# vhost name hash path
rabbitmqctl eval 'rabbit_vhost:dir("VHOST_NAME").'

# rabbitmqctl eval 'rabbit_vhost:dir("/").'
"628WB79CIFDYO9LJI6DKMI09L"
#


# message store path
rabbitmqctl eval 'rabbit_vhost:msg_store_dir_path(<<"VHOST_NAME">>).'


# rabbitmqctl eval 'rabbit_vhost:msg_store_dir_path(<<"/">>).'
"/root/rabbitmq_server-4.0.5/var/lib/rabbitmq/mnesia/rabbit@ubuntu1/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L"
#



# classic queue hash path
├── msg_stores
│   └── vhosts
│       └── 628WB79CIFDYO9LJI6DKMI09L
│           ├── msg_store_persistent
│           │   └── 0.rdq
│           ├── msg_store_transient
│           │   └── 0.rdq
│           ├── queues
│           │   └── 8B8P2A9QO5EECHV4KXXKZWUKI
│           └── recovery.dets



rabbitmqctl eval '<<Num:128>> = erlang:md5(<<"queue", <<"VHOST_NAME">>/binary, <<"Classic_QUEUE_NAME">>/binary>>), rabbit_misc:format("~.36B", [Num]).'













# decalre queue
rabbitmqctl eval 'rabbit_amqqueue:declare({resource,<<"vhost_name">>,queue,<<"queue_name">>}, true, false, [{<<"x-queue-type">>,longstr,<<"quorum">>}], none, <<"">>).'
rabbitmqctl eval 'rabbit_amqqueue:declare({resource,<<"/">>,queue,<<"qq1">>}, true, false, [{<<"x-queue-type">>,longstr,<<"quorum">>}], none, <<"">>).'

# delete queue
rabbitmqctl eval '{ok, Q} = rabbit_amqqueue:lookup(rabbit_misc:r(<<"vhost_name">>, queue, <<"queue_name">>)), rabbit_amqqueue:delete(Q,false,false,<<"">>).'


# purge queue
rabbitmqctl eval '{ok, Q} = rabbit_amqqueue:lookup(rabbit_misc:r(<<"vhost_name">>, queue, <<"queue_name">>)), rabbit_queue_type:purge(Q).'






rabbitmq-server –detached
rabbitmqctl shutdown
rabbitmqctl cluster_status





rabbitmq-plugins enable rabbitmq_management

# The RabbitMQ server gives you a default username and password, that is guest:guest. Note that guest:guest won't work for remote a RabbitMQ server later than version 3.3




# add user
rabbitmqctl add_user admin password
rabbitmqctl set_permissions --vhost / admin ".*" ".*" ".*"
rabbitmqctl set_user_tags admin administrator







# rabbitmq interactive mode
export RABBITMQ_ALLOW_INPUT='true'

rabbit_log:debug("test").
rabbit_log:info("test").





rabbitmq-diagnostics erlang_cookie_sources --formatter json | jq .




# how to leave the cluster

# run the following command on the node2 where you want to leave the cluster
rabbitmqctl stop_app


#run following command on other online node
rabbitmqctl forget_cluster_node rabbit@node2








On all of the nodes in Raft State "follower" force delete the replica, replace "VHostName" and "QueueName" with the appropriate values

rabbitmqctl eval "ra:force_delete_server(quorum_queues, {'VHostName_QueueName', node()})."
On the remaining node with Raft State "pre_vote" run:

rabbitmqctl eval "ra_server_proc:force_shrink_members_to_current_member({'VHostName_QueueName', node()})."
Verify the state of the queue, there should be just one node as leader:















egrep -Ri 'Time to start RabbitMQ' *


