rabbitmqctl eval "rabbit_misc:version()."

rabbitmqctl eval "rabbit_misc:otp_release()."

rabbitmqctl eval "node()."

rabbitmqctl eval "nodes()."

rabbitmqctl eval "rabbit_nodes:list_running()."
rabbitmqctl eval 'rabbit_mgmt_metrics_collector:reset_all().'
rabbitmqctl eval 'rabbit_vhost:msg_store_dir_path(<<"/">>).'






rabbitmqctl eval 'application:get_all_env(rabbit).'

rabbitmqctl eval 'rabbit_shovel_status:status().'

rabbitmqctl eval "rabbit_misc:version()."

rabbitmqctl eval "rabbit_misc:otp_release()."


rabbitmqctl eval 'application:get_all_env(rabbit).'

rabbitmqctl eval 'application:get_env(rabbit, log).'

rabbitmqctl eval 'application:get_env(rabbit, loopback_users).'

rabbitmqctl eval 'node(), nodes().'

rabbitmqctl eval 'rabbit_log:critical("Severity = critical").'

rabbitmqctl eval 'rabbit_log:error("Severity = error").'

rabbitmqctl eval 'rabbit_log:warning("Severity = warning").'

rabbitmqctl eval "net_adm:ping('rabbit@NODE-NAME')."

rabbitmqctl eval 'rabbit_diagnostics:maybe_stuck().'

rabbitmqctl eval 'erlang:system_info(process_limit).'

rabbitmqctl eval 'inet:i().'

rabbitmqctl eval 'rabbit_amqqueue:internal_delete({resource,<<"prod">>,queue,<<"x1">>}).'




# classic queue hash path

├── msg_stores
│   └── vhosts
│       └── 628WB79CIFDYO9LJI6DKMI09L
│           ├── msg_store_persistent
│           │   └── 0.rdq
│           ├── msg_store_transient
│           │   └── 0.rdq
│           ├── queues
│           │   └── 8B8P2A9QO5EECHV4KXXKZWUKI
│           └── recovery.dets



rabbitmqctl eval '<<Num:128>> = erlang:md5(<<"queue", <<"VHOST_NAME">>/binary, <<"Classic_QUEUE_NAME">>/binary>>), rabbit_misc:format("~.36B", [Num]).'















rabbitmqctl eval 'Q = {resource, <<"virtual host name">>, queue, <<"queue name">>}, rabbit_amqqueue:internal_delete(Q, <<"CLI">>).'









rabbitmq-server –detached
rabbitmqctl shutdown
rabbitmqctl cluster_status



